###########################################################################
SHELL SCRIPTING TUTORIAL

# bourne, c shell, korn shell, GNU bourne again shell
##########################################################################
Script -> 	#!/bin/bash
		# Author: Josip Æosiæ
		# Script follows here:
		
		echo "What is your name?" -> ispis
		read PERSON -> èitaj varijablu PERSON
		echo "Hello, $PERSON" -> ispis varijable $PERSON

#########################################################################
WHAT IS SHELLS?

# $date -> datum
# $ -> bourne shell, % -> C shell
# bourne shell -> bourne shell, korn shell, bourne again shell, posix shell
# C shell -> C shell, tenex/tops C shell (tsch)
# #!/bin/bash -> shebang (hash (#) +bang (!) ) 
########################################################################
Script -> 	#!/bin/bash
		# Author: Josip Æosiæ
		# Script follows here:

		pwd -> trenutni direktorij
		ls -> lista direktorija
###########################################################################
USING VARIABLES

# Valid variables names -> _ALI, TOKEN_A, VAR_1, VAR_2
# Invalid variables names -> 2_VAR, -VARIABLE, VAR1-VAR2, VAR-A!
# !, *, - -> special meaning for the shell
# variable_name=variable_value 		NAME="Josip Æosiæ"
# VAR1="Josip Æosiæ" 			VAR=100
####################################################################################################################################
# Script -> 	#!/bin/bash
		NAME="Josip Æosiæ"
		echo $NAME

# readonly NAME -> printa samo name NAME="Josip Æosiæ" readonly NAME NAME="Èole" = /bin/sh: NAME: This variable is read only.	
# unset variable_name -> poništava vrijednost varijable	NAME="Josip Æosiæ" unset NAME echo $NAME = ne printa ništa 
# Varijable -> lokalne, environment, shell
#####################################################################################################################################
SPECIAL VARIABLES

# na web stranici 
# Script -> 	#!/bin/sh

		echo "File Name: $0"
		echo "First Parameter : $1"
		echo "Second Parameter : $2"
		echo "Quoted Values: $@"	
		echo "Quoted Values: $*"
		echo "Total Number of Parameters : $#"
###############################################################################
#Script -> 	#!/bin/sh

		for TOKEN in $*
		do
   			echo $TOKEN
		done
###############################################################################
USING SHELL ARRAYS

# Array variable -> multiple values at the same time
# NAME01="Ivo" NAME02="..." NAME03="++++" .... -> scalar variable
# array_name[index]=value -> stvaranje arraya
# ksh ->  set -A array_name value1 value2 ... valuen
# bash -> array_name=(value1 ... valuen)
# Script -> 	#!/bin/sh

		NAME[0]="Zara"
		NAME[1]="Qadir"
		NAME[2]="Mahnaz"
		NAME[3]="Ayan"
		NAME[4]="Daisy"
		echo "First Index: ${NAME[0]}"
		echo "Second Index: ${NAME[1]}"
#####################################################################################
SHELL BASIC OPERATORS

	Arithmetic Operators
	Relational Operators
	Boolean Operators
	String Operators
	File Test Operators

# spaces between operators and expressions
# ostalo na web stranici
# Script ->  	#!/bin/sh

		val=`expr 2 + 2`
		echo "Total value : $val"
#######################################################################################################
SHELL DECISION MAKING

# if...else statement -> if...fi statement, if...else...fi statemant, if...elif...else...fi statement
# if...fi statement -> syntax -> 
				if [expression]
				then
					Statement(s) to be executed if expression is true
				fi

#######################################################################################################
Script -> 	#!/bin/sh

		a=10
		b=20

		if [ $a == $b ]
		then
   			echo "a is equal to b"
		fi

		if [ $a != $b ]
		then
   			echo "a is not equal to b"
		fi
######################################################################################################
# if...else...fi -> syntax ->
				if [ expression ]
				then
   					Statement(s) to be executed if expression is true
				else
   					Statement(s) to be executed if expression is not true
				fi

#####################################################################################################
Script -> 			#!/bin/sh

				a=10
				b=20

				if [ $a == $b ]
				then
  					 echo "a is equal to b"
				else
   					echo "a is not equal to b"
				fi 

####################################################################################################
# if...elif...fi -> syntax -> 	if [ expression 1 ]
				then
   					Statement(s) to be executed if expression 1 is true
				elif [ expression 2 ]
				then
   					Statement(s) to be executed if expression 2 is true
				elif [ expression 3 ]
				then
   					Statement(s) to be executed if expression 3 is true
				else
   				Statement(s) to be executed if no expression is true
				fi
####################################################################################################
Script -> 			#!/bin/sh

				a=10
				b=20

				if [ $a == $b ]
				then
   					echo "a is equal to b"
				elif [ $a -gt $b ]
				then
   					echo "a is greater than b"
				elif [ $a -lt $b ]
				then
   					echo "a is less than b"
				else
  					 echo "None of the condition met"
fi
###################################################################################################
# case...esac -> syntax -> 	case word in
   				pattern1)
      					Statement(s) to be executed if pattern1 matches
      				;;
   				pattern2)
      					Statement(s) to be executed if pattern2 matches
      				;;
   				pattern3)
      					Statement(s) to be executed if pattern3 matches
      				;;
   					*)
     					Default condition to be executed
     				;;
				esac
#################################################################################################
Script -> 		#!/bin/sh

			FRUIT="kiwi"

			case "$FRUIT" in
   			"apple") echo "Apple pie is quite tasty." 
   			;;
   			"banana") echo "I like banana nut bread." 
   			;;
   			"kiwi") echo "New Zealand is famous for kiwi." 
   			;;
			esac
##################################################################################################
SHELL LOOP TYPES

# the while loop -> syntax -> 	while command
				
				do
					Statement(s) to be executed if command is true
				done
##################################################################################################
Script -> 	#!/bin/sh
		
	  	a=0
		
		while [ $a -lt 10 ] 
		do
			echo $a
			a=`expr $a + 1`
			done 
#################################################################################################
# the for loop -> syntax -> 	for var1 in word1 word2...wordN
				do
					Statement(s) to be executed for every word
				done
################################################################################################
Script -> 			#!/bin/sh
				for var in 0 1 2 3 4 5 6 7 8 9
				do
					echo $var
				done
###############################################################################################
# the until loop -> syntax -> 	until command
				do
					Statement(s) to be executed until command is true
				done
##############################################################################################
Script -> 			#!/bin/sh
		
				a=0

				until [ ! $a -lt 10]
				do
					echo $a
				a=`expr $a + 1`
				done
##############################################################################################
# select loop -> syntax -> 	select var in word1 word2...wordN
				do
					Statement(s) to be executed for every word
				done
#############################################################################################
Script -> 	#!/bin/ksh

		select DRINK in tea cofee water juice appe all none
		do
   			case $DRINK in
      				tea|cofee|water|all) 
         				echo "Go to canteen"
         				;;
      				juice|appe)
         				echo "Available at home"
      				;;
      				none) 
         				break 
      				;;
      				*) echo "ERROR: Invalid selection" 
      				;;
   			esac
			done
###################################################################################################	
# Nesting loop -> syntax -> 	while command1 ; # this is loop1, the outer loop
				do
   					Statement(s) to be executed if command1 is true

   					while command2 ; # this is loop2, the inner loop
   					do
      					Statement(s) to be executed if command2 is true
   					done

  					 Statement(s) to be executed if command1 is true
					done
###################################################################################################
Script -> 	#!/bin/sh

		a=0
		while [ "$a" -lt 10 ]    # this is loop1
		do
   			b="$a"
   			while [ "$b" -ge 0 ]  # this is loop2
   			do
      				echo -n "$b "
      				b=`expr $b - 1`
   			done
   			echo
   			a=`expr $a + 1`
			done
#####################################################################################################
# SHELL LOOP CONTROL
# the infinite loop -> executes forever without terminating 
#####################################################################################################
Script -> 	#!b/bin/sh
		
		a=10

		until [ $a -lt 10 ]
		do

		echo $a
		a=`expr $a + 1`
		done
#####################################################################################################
# break -> terminate statement of the entire loop, after completing all of the lines of code
# syntax -> break/break n (n-th)
#####################################################################################################
Script -> 	#!/bin/sh

		a=0

		while [ $a -lt 10 ]
		do
   			echo $a
   			if [ $a -eq 5 ]
   			then
      				break
   			fi
   			a=`expr $a + 1`
		done
#####################################################################################################
Script -> 	#!/bin/sh

		for var1 in 1 2 3
		do
   			for var2 in 0 5
   			do
      				if [ $var1 -eq 2 -a $var2 -eq 0 ]
      				then
         				break 2
      				else
         				echo "$var1 $var2"
      				fi
   			done
		done
#####################################################################################################
# continue -> kao break (trenutna iteracija se prekida,ne sve)
# syntax -> continue/continue n
#####################################################################################################
Script -> 	#!/bin/sh

		NUMS="1 2 3 4 5 6 7"

		for NUM in $NUMS
		do
   			Q=`expr $NUM % 2`
   			if [ $Q -eq 0 ]
   			then
      				echo "Number is an even number!!"
      				continue
   			fi
   			echo "Found odd number"
		done	
#####################################################################################################
# SHELL SUBSTITUTIONS 
# substitution -> when it ecounters an expression that contains one or more special character
#####################################################################################################
Skripta -> 	#!/bin/sh

		a=10
		echo -e "Value of a is $a \n"
#####################################################################################################
Skripta (command substitution) -> 	#!/bin/sh

					DATE=`date`
					echo "Date is $DATE"

					USERS=`who | wc -l`
					echo "Logged in user are $USERS"

					UP=`date ; uptime`
					echo "Uptime is $UP"
#####################################################################################################
# SHELL QUOTING MECHANISMS
# metacharacters -> * ? [ ] ' " \ $ ; & ( ) | ^ < > new-line space tab
#####################################################################################################
# 	#!/bin/sh
			-> error baca
	echo Hello; Word
#####################################################################################################
# 	#!/bin/sh
			-> ispravno
	echo Hello\; Word
#####################################################################################################
# 	#!/bin/sh
			-> $ = metacharacter
	echo "I have \$1200"
####################################################################################################
# ostalo na web stranici -> single quotes, double quotes, backquotes...
####################################################################################################
	DATE=`date`
			-> backquotes
	echo "Current Date: $DATE"
####################################################################################################
# SHELL INPUT/OUTPUT REDIRECTIONS
# take input from terminal -> results back to terminal
# OUTPUT REDIRECTION -> standard output to file (>)
# who > users = no ouput -> cat users (all info from who > users)
# lost of data (in case if file (redirected) already has some data on it)
# example -> $echo line 1 > users 
	     $ cat users 
	     line 1
	     $
####################################################################################################
# we then use >> to append the output in an existing file as follows
# example -> $echo line 2 >> users
	     $ cat users
	     line 1
	     line 2
             $
####################################################################################################
# INPUT REDIRECTION -> input of a command can be redirected from a file (<)
# example -> $ wc -l users
	     2 users		= reading its input from the file users
	     $ 
####################################################################################################
# standard input of the wc command from the file users
# example -> $wc - < users
	     2			= its reading input from standard input so it does not display file name
	     $
####################################################################################################
# here document -> used to redirect input into an interactive shell script or program
# example of here -> command << delimiter
		     document
		     delimiter

# << read input until it finds a line containing the specified deilimiter
# tells that here document is completed, without it shell continues to read the input forever
####################################################################################################
# exapmle ->	$wc -l << EOF
   		This is a simple lookup program 
		for good (and bad) restaurants
		in Cape Town.			= count total number of lines 
		EOF
		3
		$ 		
####################################################################################################
example -> 	#!/bin/sh

		filename=test.txt
		vi $filename <<EndOfCommands
		i
		This file was created automatically from
		a shell script
		^[
		ZZ
		EndOfCommands
####################################################################################################
# DISCARD THE OUTPUT  -> no output displayed on the screen
# $ command > /dev/null
# discard both output of a command and its error output -> $ command > /dev/null 2>&1
# 2 = STDERR, 1= STDOUT, display a message on to STDERR by redirecting STDOUT into STDERR
# $ echo message 1>&2
####################################################################################################
# SHELL FUNCTIONS 
# functions -> enable you to break down the overall functionality of a script into smaller, subsections which can then be called upon
# code reuse -> syntax -> function_name () {
			  list of commands 
			  }
####################################################################################################
Script -> 	#!/bin/sh

		# Define your function here
		Hello () {
   			echo "Hello World"
			}

		# Invoke your function
		Hello
####################################################################################################
Script-parametri -> 	#!/bin/sh
			a=Josip
			b=Æosiæ

			# Define your function here
			Ime-prezime () {
   				echo "Ovo je $a $b"
				}

			# Invoke your function
			Ime-prezime
####################################################################################################
# Returning values  from functions -> return
Script -> 	#!/bin/sh
		a=12
		b=20
		
		# Define your function here
		DigitalHippo () {
   			echo "$1 $2"
   				return 100
				}

		# Invoke your function
		DigitalHippo

		# Capture value returnd by last command
		ret=$?

		echo "Return value is $ret"	
####################################################################################################
# Nested functions -> recursive functions = call themselves
Script -> 	#!/bin/sh

		# Calling one function from another
		number_one () {
   			echo "This is the first function speaking..."
   			number_two
		}


		number_two () {
   			echo "This is now the second function speaking..."
		}

		# Calling function one.
		number_one
####################################################################################################
# Function call from prompt -> .profile 
####################################################################################################














